// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Post Post
//
// swagger:model Post
type Post struct {

	// created at
	CreatedAt string `json:"created_at,omitempty"`

	// iconimage
	Iconimage string `json:"iconimage,omitempty"`

	// options
	Options []*PostOptionsItems0 `json:"options"`

	// post id
	PostID string `json:"post_id,omitempty"`

	// question
	Question string `json:"question,omitempty"`

	// selected num
	SelectedNum int64 `json:"selected_num,omitempty"`

	// total
	Total int64 `json:"total,omitempty"`

	// user id
	UserID string `json:"user_id,omitempty"`

	// voted
	Voted bool `json:"voted,omitempty"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (m *Post) UnmarshalJSON(data []byte) error {
	var props struct {

		// created at
		CreatedAt string `json:"created_at,omitempty"`

		// iconimage
		Iconimage string `json:"iconimage,omitempty"`

		// options
		Options []*PostOptionsItems0 `json:"options"`

		// post id
		PostID string `json:"post_id,omitempty"`

		// question
		Question string `json:"question,omitempty"`

		// selected num
		SelectedNum int64 `json:"selected_num,omitempty"`

		// total
		Total int64 `json:"total,omitempty"`

		// user id
		UserID string `json:"user_id,omitempty"`

		// voted
		Voted bool `json:"voted,omitempty"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	m.CreatedAt = props.CreatedAt
	m.Iconimage = props.Iconimage
	m.Options = props.Options
	m.PostID = props.PostID
	m.Question = props.Question
	m.SelectedNum = props.SelectedNum
	m.Total = props.Total
	m.UserID = props.UserID
	m.Voted = props.Voted
	return nil
}

// Validate validates this post
func (m *Post) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Post) validateOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.Options) { // not required
		return nil
	}

	for i := 0; i < len(m.Options); i++ {
		if swag.IsZero(m.Options[i]) { // not required
			continue
		}

		if m.Options[i] != nil {
			if err := m.Options[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("options" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("options" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this post based on the context it is used
func (m *Post) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Post) contextValidateOptions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Options); i++ {

		if m.Options[i] != nil {
			if err := m.Options[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("options" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("options" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Post) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Post) UnmarshalBinary(b []byte) error {
	var res Post
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PostOptionsItems0 post options items0
//
// swagger:model PostOptionsItems0
type PostOptionsItems0 struct {

	// answer
	Answer string `json:"answer,omitempty"`

	// select num
	SelectNum int64 `json:"select_num,omitempty"`

	// votes
	Votes int64 `json:"votes,omitempty"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (m *PostOptionsItems0) UnmarshalJSON(data []byte) error {
	var props struct {

		// answer
		Answer string `json:"answer,omitempty"`

		// select num
		SelectNum int64 `json:"select_num,omitempty"`

		// votes
		Votes int64 `json:"votes,omitempty"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	m.Answer = props.Answer
	m.SelectNum = props.SelectNum
	m.Votes = props.Votes
	return nil
}

// Validate validates this post options items0
func (m *PostOptionsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post options items0 based on context it is used
func (m *PostOptionsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PostOptionsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PostOptionsItems0) UnmarshalBinary(b []byte) error {
	var res PostOptionsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
