// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetAPIV1UsersHandlerFunc turns a function with the right signature into a get API v1 users handler
type GetAPIV1UsersHandlerFunc func(GetAPIV1UsersParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetAPIV1UsersHandlerFunc) Handle(params GetAPIV1UsersParams) middleware.Responder {
	return fn(params)
}

// GetAPIV1UsersHandler interface for that can handle valid get API v1 users params
type GetAPIV1UsersHandler interface {
	Handle(GetAPIV1UsersParams) middleware.Responder
}

// NewGetAPIV1Users creates a new http.Handler for the get API v1 users operation
func NewGetAPIV1Users(ctx *middleware.Context, handler GetAPIV1UsersHandler) *GetAPIV1Users {
	return &GetAPIV1Users{Context: ctx, Handler: handler}
}

/*
	GetAPIV1Users swagger:route GET /api/v1/users users getApiV1Users

# Your GET endpoint

get users list
*/
type GetAPIV1Users struct {
	Context *middleware.Context
	Handler GetAPIV1UsersHandler
}

func (o *GetAPIV1Users) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetAPIV1UsersParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
