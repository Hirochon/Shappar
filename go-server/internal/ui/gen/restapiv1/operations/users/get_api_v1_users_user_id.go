// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetAPIV1UsersUserIDHandlerFunc turns a function with the right signature into a get API v1 users user ID handler
type GetAPIV1UsersUserIDHandlerFunc func(GetAPIV1UsersUserIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetAPIV1UsersUserIDHandlerFunc) Handle(params GetAPIV1UsersUserIDParams) middleware.Responder {
	return fn(params)
}

// GetAPIV1UsersUserIDHandler interface for that can handle valid get API v1 users user ID params
type GetAPIV1UsersUserIDHandler interface {
	Handle(GetAPIV1UsersUserIDParams) middleware.Responder
}

// NewGetAPIV1UsersUserID creates a new http.Handler for the get API v1 users user ID operation
func NewGetAPIV1UsersUserID(ctx *middleware.Context, handler GetAPIV1UsersUserIDHandler) *GetAPIV1UsersUserID {
	return &GetAPIV1UsersUserID{Context: ctx, Handler: handler}
}

/*
	GetAPIV1UsersUserID swagger:route GET /api/v1/users/{user_id} users getApiV1UsersUserId

# Your GET endpoint

get user details
*/
type GetAPIV1UsersUserID struct {
	Context *middleware.Context
	Handler GetAPIV1UsersUserIDHandler
}

func (o *GetAPIV1UsersUserID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetAPIV1UsersUserIDParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
