// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PutAPIV1UsersUserIDSettingsHandlerFunc turns a function with the right signature into a put API v1 users user ID settings handler
type PutAPIV1UsersUserIDSettingsHandlerFunc func(PutAPIV1UsersUserIDSettingsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PutAPIV1UsersUserIDSettingsHandlerFunc) Handle(params PutAPIV1UsersUserIDSettingsParams) middleware.Responder {
	return fn(params)
}

// PutAPIV1UsersUserIDSettingsHandler interface for that can handle valid put API v1 users user ID settings params
type PutAPIV1UsersUserIDSettingsHandler interface {
	Handle(PutAPIV1UsersUserIDSettingsParams) middleware.Responder
}

// NewPutAPIV1UsersUserIDSettings creates a new http.Handler for the put API v1 users user ID settings operation
func NewPutAPIV1UsersUserIDSettings(ctx *middleware.Context, handler PutAPIV1UsersUserIDSettingsHandler) *PutAPIV1UsersUserIDSettings {
	return &PutAPIV1UsersUserIDSettings{Context: ctx, Handler: handler}
}

/*
	PutAPIV1UsersUserIDSettings swagger:route PUT /api/v1/users/{user_id}/settings users putApiV1UsersUserIdSettings

update user settings
*/
type PutAPIV1UsersUserIDSettings struct {
	Context *middleware.Context
	Handler PutAPIV1UsersUserIDSettingsHandler
}

func (o *PutAPIV1UsersUserIDSettings) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPutAPIV1UsersUserIDSettingsParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
