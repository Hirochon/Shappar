// Code generated by go-swagger; DO NOT EDIT.

package friendships

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetAPIV1FrendshipsUserIDFollowersHandlerFunc turns a function with the right signature into a get API v1 frendships user ID followers handler
type GetAPIV1FrendshipsUserIDFollowersHandlerFunc func(GetAPIV1FrendshipsUserIDFollowersParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetAPIV1FrendshipsUserIDFollowersHandlerFunc) Handle(params GetAPIV1FrendshipsUserIDFollowersParams) middleware.Responder {
	return fn(params)
}

// GetAPIV1FrendshipsUserIDFollowersHandler interface for that can handle valid get API v1 frendships user ID followers params
type GetAPIV1FrendshipsUserIDFollowersHandler interface {
	Handle(GetAPIV1FrendshipsUserIDFollowersParams) middleware.Responder
}

// NewGetAPIV1FrendshipsUserIDFollowers creates a new http.Handler for the get API v1 frendships user ID followers operation
func NewGetAPIV1FrendshipsUserIDFollowers(ctx *middleware.Context, handler GetAPIV1FrendshipsUserIDFollowersHandler) *GetAPIV1FrendshipsUserIDFollowers {
	return &GetAPIV1FrendshipsUserIDFollowers{Context: ctx, Handler: handler}
}

/*
	GetAPIV1FrendshipsUserIDFollowers swagger:route GET /api/v1/frendships/{userId}/followers friendships getApiV1FrendshipsUserIdFollowers

# Your GET endpoint

get followers
*/
type GetAPIV1FrendshipsUserIDFollowers struct {
	Context *middleware.Context
	Handler GetAPIV1FrendshipsUserIDFollowersHandler
}

func (o *GetAPIV1FrendshipsUserIDFollowers) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetAPIV1FrendshipsUserIDFollowersParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
