// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: firebase_user.sql

package sqlcgenerate

import (
	"context"
	"time"
)

const createFirebaseTokenVerify = `-- name: CreateFirebaseTokenVerify :exec
INSERT INTO ` + "`" + `firebase_token_verify` + "`" + ` (` + "`" + `firebase_user_id` + "`" + `, ` + "`" + `uid` + "`" + `, ` + "`" + `email` + "`" + `, ` + "`" + `verified_time` + "`" + `)
VALUES (?, ?, ?, ?)
`

type CreateFirebaseTokenVerifyParams struct {
	FirebaseUserID string    `json:"firebaseUserID"`
	Uid            string    `json:"uid"`
	Email          string    `json:"email"`
	VerifiedTime   time.Time `json:"verifiedTime"`
}

func (q *Queries) CreateFirebaseTokenVerify(ctx context.Context, arg CreateFirebaseTokenVerifyParams) error {
	_, err := q.db.ExecContext(ctx, createFirebaseTokenVerify,
		arg.FirebaseUserID,
		arg.Uid,
		arg.Email,
		arg.VerifiedTime,
	)
	return err
}

const createFirebaseUser = `-- name: CreateFirebaseUser :exec
INSERT INTO ` + "`" + `firebase_user` + "`" + ` (` + "`" + `id` + "`" + `, ` + "`" + `uid` + "`" + `, ` + "`" + `email` + "`" + `)
VALUES (?, ?, ?)
`

type CreateFirebaseUserParams struct {
	ID    string `json:"id"`
	Uid   string `json:"uid"`
	Email string `json:"email"`
}

func (q *Queries) CreateFirebaseUser(ctx context.Context, arg CreateFirebaseUserParams) error {
	_, err := q.db.ExecContext(ctx, createFirebaseUser, arg.ID, arg.Uid, arg.Email)
	return err
}
